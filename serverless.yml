# NOTE: update this with your service name
service: playbook-starter

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-step-functions
  - serverless-pseudo-parameters

custom:
  bucket: mfcircus
  stage: "${opt:stage, self:provider.stage}"
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      forceExclude:
      - puppeteer
    packagerOptions:
      scripts:
      - npm install puppeteer --ignore-scripts


provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1
  memorySize: 1024
  timeout: 600
  environment: ${file(../env.yml):${self:custom.stage}}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:ListBucket
      Resource: "arn:aws:s3:::${self:custom.bucket}/*"

package:
  exclude:
    - node_modules/puppeteer/.local-chromium/** # exclude puppeteer chrome if exists

functions:
  showIP:
    handler: handler.showIP

stepFunctions:
  stateMachines:
    playbookDemo:
      name: ${self:service}-playbook-demo-${self:custom.stage}
      definition:
        Comment: "Demo playbook"
        StartAt: IsActive?
        States:
          IsActive?:
            Type: Choice
            Choices:
              - Variable: "$.Actor.SleepSeconds"
                NumericGreaterThan: 0
                Next: Sleeping
            Default: HasUserAgent?
          Sleeping:
            Type: Wait
            SecondsPath: "$.Actor.SleepSeconds"
            Next: HasUserAgent?
          HasUserAgent?:
            Type: Choice
            Choices:
              - Variable: "$.Actor.BrowserUserAgent"
                StringEquals: ""
                Next: BindDevice
            Default: GetProxy
          BindDevice:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:sns-${self:custom.stage}-bind-device
            Next: GetProxy
          GetProxy:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:sns-${self:custom.stage}-get-proxy
            InputPath: "$.Actor"
            ResultPath: "$.Actor"
            Next: Working
            Retry:
              - ErrorEquals:
                  - ErrorProxyNotFound
                IntervalSeconds: 3
                BackoffRate: 2.0
                MaxAttempts: 2
            Catch:
              - ErrorEquals:
                  - ErrorProxyNotFound
                Next: Failed
          Working:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:custom.stage}-showIP
            Next: SaveState
            # Catch:
            # - ErrorEquals:
            #   - ErrorConnectionLost
            #   Next: HasEndpoint?
          SaveState:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:sns-${self:custom.stage}-save-state
            Next: Succeed
          Failed:
            Type: Fail
          Succeed:
            Type: Succeed
